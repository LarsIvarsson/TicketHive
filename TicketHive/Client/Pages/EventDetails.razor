@page "/eventDetails/{id:int}"
@using TicketHive.Client.Managers;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IAppService service;
@inject NavigationManager navigation
@inject AuthenticationStateProvider authStateProvider;
@attribute [Authorize]
@inject ILocalStorageService localStorage

<button type="button" class="btn btn-secondary btn-rounded oi oi-arrow-circle-left" @onclick='() => navigation.NavigateTo("/allevents")'></button>

@if (_Event == null)
{
	<div class="row d-flex justify-content-center">
		<div class="col-2">
			<div class="spinner-border"></div>
		</div>
	</div>
}
else
{	
	<div class="container">
		@if(_Event.IsSoldOut == true)
		{	
			<img src="@_Event.ImageUrl" style="max-width:400px; opacity: 0.5;" />
			<hr style="color:transparent; background-color:transparent"/>
			<button class="action" style="width: 400px; height: 40px; opacity: 1.0; text-align: center; margin-bottom: 20px; color: red; font-weight: bold;">FULLY BOOKED</button>
			<p>Price: @Math.Round((_Event.Price*userRate), 2) @CurrencyManager.Currency</p>
			<p>Venue: @_Event.Venue</p>

			<label for="ticket-input">Tickets </label>
			<input class="m-3" id="ticket-input" type="number" min="0" max="0" style="opacity: 0.5" />
			<input class="btn btn-primary" type="submit" value="Add to cart" style="opacity: 0.5" />
		}
		else
		{
@*			<img src="@_Event.ImageUrl" style="max-width:400px;" />
			<hr style="color:transparent; background-color:transparent" />
			<p>Price: @Math.Round((_Event.Price*userRate), 2) @CurrencyManager.Currency</p>
			<p>Venue: @_Event.Venue</p>

			<label for="ticket-input">Tickets </label>
			<input class="m-3" id="ticket-input" type="number" min="0" max="10" @bind-value="Quantity"/>
			<input class="btn btn-primary" type="submit" value="Add to cart" @onclick=AddToShoppingCart/>*@
			<div class="card shadow-lg mx-auto" style="width:400px">
				<img class="card-img-top" src="@_Event.ImageUrl" alt="Card image">
				<div class="card-body">
					<h4 class="card-title text-center"><strong>@_Event.Name</strong></h4>
					<ul class="list-group list-group-flush">
						<li class="list-group-item">Price: <strong>@Math.Round((_Event.Price*userRate), 2) @CurrencyManager.Currency</strong></li>
						<li class="list-group-item">Venue: <strong>@_Event.Venue</strong></li>
						<li class="list-group-item">Date: <strong>@_Event.Date.ToString("yyyy-MM-dd")</strong></li>
					</ul>
					<div class="text-center">
						<label for="ticket-input">Tickets: </label>
						<input class="m-3" id="ticket-input" type="number" min="0" max="10" @bind-value="Quantity" />
						<input class="btn btn-primary" type="submit" value="Add to cart" @onclick=AddToShoppingCart />
					</div>
				</div>
			</div>
		}
		</div>

	<style>
		.fullyBooked{
			position: relative;
			width: 100%;
			height: 100%;
			background-color: rgba(24, 83, 122, 0.6);
			opacity: 0;
			transition: height linear 0.4s, opacity linear 0.2s;
		}
	</style>
}

@code {
	[Parameter]
	public int id { get; set; }
	public int Quantity { get; set; }
	public EventModel? _Event { get; set; }
	public UserModel? _User { get; set; }
	private AuthenticationState? authState;
	private string? userCountry { get; set; }
	private decimal userRate { get; set; }

	protected override async Task OnInitializedAsync()
	{
		authState = await authStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		if (user.Identity!.IsAuthenticated)
		{
			_User = await service.GetUserByUsernameAsync(user.Identity.Name!);

			userCountry = await service.GetUserCountryByUsernameAsync(user.Identity.Name!);

			if (userCountry != null)
			{
				userRate = await CurrencyManager.GetRate(userCountry);
			}
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		_Event = await service.GetEventByIdAsync(id);		
	}

	private async Task AddToShoppingCart()
	{
		// Reads cookie in local storage (if there is any) with current username
		UserModel? cookieUser = await localStorage
			.GetItemAsync<UserModel>(authState?.User.Identity?.Name);

		// if cookie is found we use that object as our user
		if (cookieUser != null)
		{
			_User = cookieUser;
		}

		// adds event to users event list "selected number of times"
		for (int i = 0; i < Quantity; i++)
		{
			_User!.UserEvents!.Add(_Event!);
		}

		// finally converts object with updated event list to cookie and saves to local storage
		await localStorage.SetItemAsync(authState?.User.Identity?.Name, _User);
	}
}
