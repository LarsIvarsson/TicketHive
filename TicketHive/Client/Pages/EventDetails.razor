@page "/eventDetails/{id:int}"
@using TicketHive.Client.Managers;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IAppService service;
@inject NavigationManager navigation
@inject AuthenticationStateProvider authStateProvider;
@attribute [Authorize]
@inject ILocalStorageService localStorage
@inject ICartService cartService
@*@inject IToastService ToastService*@

<button type="button" class="btn btn-secondary btn-rounded oi oi-arrow-circle-left" @onclick='() => navigation.NavigateTo("/allevents")'></button>

@*--- PRINTA INFO OM PECIFIKT EVENT ---*@
@if (_Event == null)
{
	<div class="row d-flex justify-content-center">
		<div class="col-2">
			<div class="spinner-border"></div>
		</div>
	</div>
}

else
{	
	<div class="container">
		@if(_Event.IsSoldOut == true)
		{	
			<div class="card shadow-lg mx-auto" style="width:400px;">
				<img class="card-img-top" style="opacity: 0.5" src="@_Event.ImageUrl" alt="Card image">
				<button class="action" style="width: 400px; height: 40px; opacity: 1.0; text-align: center; margin-bottom: 20px; color: red; font-weight: bold;">FULLY BOOKED</button>
				<div class="card-body">
					<h4 class="card-title text-center"><strong>@_Event.Name</strong></h4>
					<ul class="list-group list-group-flush">
						<li class="list-group-item">Price: <strong>@Math.Round((_Event.Price*userRate), 2) @CurrencyManager.Currency</strong></li>
						<li class="list-group-item">Venue: <strong>@_Event.Venue</strong></li>
						<li class="list-group-item">Date: <strong>@_Event.Date.ToString("yyyy-MM-dd")</strong></li>
					</ul>
					<div class="text-center">				
						<input class="btn btn-primary mt-1" type="submit" value="Add to cart" disabled />
					</div>
				</div>
			</div>
		}
		else
		{
			<div class="card shadow-lg mx-auto" style="width:400px">
				<img class="card-img-top" src="@_Event.ImageUrl" alt="Card image">
				<div class="card-body">
					<h4 class="card-title text-center"><strong>@_Event.Name</strong></h4>
					<ul class="list-group list-group-flush">
						<li class="list-group-item">Price: <strong>@Math.Round((_Event.Price*userRate), 2) @CurrencyManager.Currency</strong></li>
						<li class="list-group-item">Venue: <strong>@_Event.Venue</strong></li>
						<li class="list-group-item">Date: <strong>@_Event.Date.ToString("yyyy-MM-dd")</strong></li>
					</ul>
					<div class="text-center">
						<input class="btn btn-primary mt-1" type="submit" value="Add to cart" @onclick=AddToShoppingCart />
					</div>
				</div>
			</div>
		}
	</div>
}	

	<style>
		.fullyBooked{
			position: relative;
			width: 100%;
			height: 100%;
			background-color: rgba(24, 83, 122, 0.6);
			opacity: 0;
			transition: height linear 0.4s, opacity linear 0.2s;
		}
	</style>

@code {
	[Parameter]
	public int id { get; set; }
	//public int Quantity { get; set; } = 1;
	public EventModel? _Event { get; set; }
	public UserModel? _User { get; set; }
	private AuthenticationState? authState;
	private string? userCountry { get; set; }
	private decimal userRate { get; set; }

	/// <summary>
	/// Override method called when the component is initialized asynchronously.
	/// Retrieves the authentication state, user details, and user's country and currency rate information
	/// for authenticated users.
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		authState = await authStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		if (user.Identity!.IsAuthenticated)
		{
			_User = await service.GetUserByUsernameAsync(user.Identity.Name!);

			userCountry = await service.GetUserCountryByUsernameAsync(user.Identity.Name!);

			if (userCountry != null)
			{
				userRate = await CurrencyManager.GetRate(userCountry);
			}
		}
	}

	/// <summary>
	/// Retrieves an event by ID from the service.
	/// </summary>
	protected override async Task OnParametersSetAsync()
	{
		_Event = await service.GetEventByIdAsync(id);		
	}

	/// <summary>
	/// Adds the current event to the shopping cart for the authenticated user asynchronously.
	/// </summary>
	private async Task AddToShoppingCart()
	{
		authState = await authStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		await cartService.AddToCartAsync(user.Identity.Name, _Event);

		navigation.NavigateTo("/shopping-cart");
	}
}