@page "/user"
@inject IAppService service
@inject AuthenticationStateProvider authStateProvider
@attribute [Authorize]

<h1>User settings</h1>
<hr />
<div class="row">
	<div class="col-6">
		<h2>Change password</h2>	
		<EditForm Model="Passwords" OnValidSubmit="ChangePassword">
			<DataAnnotationsValidator/>
			<ValidationSummary/>
			<InputText @bind-Value="Passwords.CurrentPassword"></InputText>
			<InputText @bind-Value="Passwords.NewPassword"></InputText>
			<button type="submit">Change password</button>
		</EditForm>
	</div>
	<div class="col-6">
		<h2>Change country</h2>
		<div>
			<EditForm Model="Country" OnValidSubmit="ChangeCountry">
				<DataAnnotationsValidator/>
				<ValidationSummary/>
				<InputSelect @bind-Value="Country.NewCountry">
					@foreach (var c in Countries)
					{
						<option value="@c.ToString()">@c.ToString()</option>
					}
				</InputSelect>
				<button type="submit">Change country</button>
			</EditForm>
		</div>
	</div>
</div>


@code {
	private AuthenticationState? authState;
	private List<string> Countries { get; set; } = new();
	private string? Username;

	private UserPasswordsModel Passwords { get; set; } = new();
	private UserCountryModel Country { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		authState = await authStateProvider.
			GetAuthenticationStateAsync();
		Username = authState.User.Identity!.Name;

		foreach (var type in Enum.GetNames(typeof(CountryEnum)))
		{
			Countries.Add(type);
		}
	}

	private async Task ChangePassword()
	{		
		await service.
			PutAppUserAsync(Username!, Passwords.CurrentPassword!, Passwords.NewPassword!);
	}

	private async Task ChangeCountry()
	{
		await service.
			PutAppUserAsync(Username!, Country.NewCountry!);
	}
}
