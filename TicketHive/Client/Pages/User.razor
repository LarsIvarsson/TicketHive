@page "/user"
@inject IAppService service
@inject AuthenticationStateProvider authStateProvider
@attribute [Authorize]

@*<h1>User settings</h1>
<hr />
<div class="row">
	<div class="col-6">
		<h2>Change password</h2>	
		<EditForm Model="Settings" OnSubmit="ChangePassword">
			<InputText @bind-Value="Settings.CurrentPassword"></InputText>
			<InputText @bind-Value="Settings.NewPassword"></InputText>
			<button type="submit">Change password</button>
		</EditForm>
	</div>
	<div class="col-6">
		<h2>Change country</h2>
		<div>
			<EditForm Model="Settings" OnSubmit="ChangeCountry">
				<InputSelect @bind-Value="Settings.Country">
					@foreach (var c in Countries)
					{
						<option value="@c.ToString()">@c.ToString()</option>
					}
				</InputSelect>
				<button type="submit">Change country</button>
			</EditForm>
		</div>
		<div>
			<button type="submit" @onclick="ChangeCountry">Change country</button>
		</div>
	</div>
</div>*@


@code {
	private AuthenticationState? authState;
	private List<string> Countries { get; set; } = new();
	private string? errorMessage;

	private UserPasswordsModel Passwords { get; set; } = new();
	private UserCountryModel Country { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		authState = await authStateProvider.GetAuthenticationStateAsync();
		var user = authState.User.Identity;
		Passwords.Username = user!.Name;
		Country.Username = user!.Name;

		foreach (var type in Enum.GetNames(typeof(CountryEnum)))
		{
			Countries.Add(type);
		}
	}

	//private void ChangePassword()
	//{
	//	if (Settings.CurrentPassword is null || Settings.NewPassword is null)
	//	{
	//		errorMessage = "Please enter both current and new password";
	//		return;
	//	}			
	//	service.ChangePasswordAsync(Settings.Username!, Settings.CurrentPassword!, Settings.NewPassword!);
	//}

	//private void ChangeCountry()
	//{
	//	if (string.IsNullOrWhiteSpace(Settings.Country))
	//	{
	//		errorMessage = "Please choose a country";
	//		return;
	//	}
	//	service.PutAppUserAsync(Settings.Username!, Settings.Country!);
	//}
}
