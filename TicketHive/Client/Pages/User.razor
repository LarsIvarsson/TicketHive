@page "/user"
@inject IAppService service
@inject AuthenticationStateProvider authStateProvider
@attribute [Authorize]

<h1 class="ms-5">User settings</h1>
<hr />
<div class="row">
	<div class="col-3 text-center m-5">
		<h2>Change password</h2>	
		<EditForm Model="Passwords" OnValidSubmit="ChangePassword">						
			<InputText class="mt-3" type="password" @bind-Value="Passwords.CurrentPassword"></InputText><br />
			<InputText class="mt-3" type="password" @bind-Value="Passwords.NewPassword"></InputText><br />
			<button class="mt-3" type="submit">Change password</button>
			<DataAnnotationsValidator />
			<ValidationSummary />
			@if (PasswordsMessage != null)
			{
				<p class="text-danger mt-2">@PasswordsMessage</p>
			}
		</EditForm>
	</div>	
	<div class="col-3 text-center m-5">
		<h2>Change country</h2>		
			<EditForm Model="Country" OnValidSubmit="ChangeCountry">				
				<InputSelect class="mt-3" @bind-Value="Country.NewCountry">
					@foreach (var c in Countries)
					{
						<option value="@c.ToString()">@c.ToString()</option>
					}
				</InputSelect><br />
				<button class="mt-3" type="submit">Change country</button>
			<DataAnnotationsValidator />
			<ValidationSummary />
			</EditForm>
		@if (CountryMessage != null)
		{
			<p class="text-danger mt-2">@CountryMessage</p>
		}
	</div>
	<div class="col-6"></div>
</div>

@code {
	private AuthenticationState? authState;
	private List<string> Countries { get; set; } = new();
	private string? Username;
<<<<<<< HEAD
=======
	private string? CountryMessage = null;
	private string? PasswordsMessage = null;

>>>>>>> master
	private UserPasswordsModel Passwords { get; set; } = new();
	private UserCountryModel Country { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		authState = await authStateProvider.
			GetAuthenticationStateAsync();
		Username = authState.User.Identity!.Name;
		Country.NewCountry = await service.GetUserCountryByUsernameAsync(Username);

		foreach (var type in Enum.GetNames(typeof(CountryEnum)))
		{
			Countries.Add(type);
		}
	}

	private async Task ChangePassword()
	{		
		PasswordsMessage = await service.
			PutAppUserAsync(Username!, Passwords.CurrentPassword!, Passwords.NewPassword!);
		Passwords = new();
		Country = new();
	}

	private async Task ChangeCountry()
	{
		CountryMessage = await service.
			PutAppUserCountryAsync(Username!, Country.NewCountry!);
		Passwords = new();
		Country = new();
	}
}