@page "/allevents"
@page "/allevents/{searchWord}"
@using TicketHive.Client.Managers;
@inject IAppService service;
@inject AuthenticationStateProvider authStateProvider;
@attribute [Authorize]

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@500&display=swap" rel="stylesheet">
</head>

<h3 class="card-title">All Events</h3>

<div class="search-Items">
    <input class="search-Input" 
    placeholder="Search event..." 
    style="text-align:center;" 
    type="text" 
    @oninput="SearchEventsDynamic" />

    <hr style="margin-bottom: 40px;" />

    <select class="filter-Input" placeholder="Filter events:" @onchange="SortEvents">
        <option style="background: #E0F2FF" value="All Events: ">All Events</option>
        <option style="background: #E0F2FF" value="Low to high price">Low to high price</option>
        <option style="background: #E0F2FF" value="High to low price">High to low price</option>
        <option style="background: #E0F2FF" value="Closest date">Closest date</option>
        <option style="background: #E0F2FF" value="Furthest date">Furthest date</option>
    </select>
</div>
<hr  />

<body>
    <div class="container">
        @if(Events == null)
        {
            <div class="spinner-border"></div>
        }
        else
        {
            @foreach (var e in fEvents!)
            {
                @if (e.IsSoldOut == true)
                @*@if(e.Price == 800)*@

                {
                    <div class="item-container" >
                        <div class="img-container" style="opacity: 0.5;">
                            <img src="@e.ImageUrl" alt="Event Image" style="height: 300px" />
                        </div>
                        <div class="body-container">
                            <div class="overlay" style="opacity: 0.5;"></div>
                            <div class="event-info" >
                                <p class="title" style="opacity: 0.5;">@e.Name</p>
                                <div class="seperator"></div>
                                <p class="place" style="opacity: 0.5;">@e.Venue</p>
                                <p class="price" style="opacity: 0.5;">@Math.Round((e.Price*userRate), 2) @CurrencyManager.Currency</p>
                                <div class="additional-info text-center" style="opacity: 0.5;">
                                    <p>
                                        <i class="fa-sharp fa-solid fa-fire align-items-center"></i>
                                        @e.Type
                                    </p>
                                    <p class="info" >
                                        <i class="fas fa-map-marker-alt"></i>
                                        Norra Bulltofta 6C
                                    </p>
                                    <p class="info">
                                        <i class="far fa-calendar-alt"></i>
                                        @e.Date.ToString("yyyy-MM-dd")
                                    </p>
                                </div>
                            </div>
                            <button class="action" style="width: 80%;  opacity: 1.0;">
                                <a style="text-decoration: none; color: red; font-weight: bold; opacity: 1.0;" href="eventDetails/@e.Id" Event="@e">FULLY BOOKED</a>
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="item-container">          
                        <div class="img-container">
                            <img src="@e.ImageUrl" alt="Event Image" style="height: 300px"/>
                        </div>
                        <div class="body-container">                   
                            <div class="overlay"></div>
                            <div class="event-info">                       
                                <p class="title">@e.Name</p>
                                <div class="seperator"></div>
                                <p class="place">@e.Venue</p>         
                                <p class="price">@Math.Round((e.Price*userRate), 2) @CurrencyManager.Currency</p>
                                <div class="additional-info text-center">
                                    <p>
                                        <i class="fa-sharp fa-solid fa-fire align-items-center"></i>
                                        @e.Type
                                    </p>
                                    <p class="info">
                                        <i class="fas fa-map-marker-alt"></i>
                                        Norra Bulltofta 6C
                                    </p>
                                    <p class="info">
                                        <i class="far fa-calendar-alt"></i>
                                        @e.Date.ToString("yyyy-MM-dd")
                                    </p>
                                   
                                </div>
                            </div>                           
                            <button class="action">
                                <a style="text-decoration: none; color: #fff" href="eventDetails/@e.Id" Event="@e">Book Now</a>
                            </button>                                         
                        </div>  
                    </div>
                }
            }
        }
    </div>
</body>

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Montserrat', sans-serif;
    }

    body{
        min-height: 100vh;
        width: 100%;
        font-size: 16px;
        color: #777;
        justify-content:center;
        
        
    }

    .card-title {
        font-size: 3.5rem;
        color: #305076;
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        text-align: center;
    }

 /*   SEARCH/FILTER*/
    .search-Items {
        margin-bottom: 1rem;
        text-align: center;
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 5px;
        
    }

    .search-Input {
        background-color: transparent;
        border-radius: 10px;
        height: 30px;
        margin: 20px;
        width: 200px;
        /*box-shadow: 0 0 5px 5px rgba(0, 0, 0, 0.05);*/
        border: 1px solid #18537a;
        position: relative;
        color: #305076;
        padding-left: 10px;
    }

    .filter-Input {
        background-color: transparent;
        border-radius: 10px;
        color: #305076;
        padding-left: 10px;
        height: 30px;
        margin: 20px;
        width: 200px;
       /* box-shadow: 0 0 5px 5px rgba(0, 0, 0, 0.05);*/
        border: 1px solid #18537a;
        position: relative;
    }

  /*  CARDS */
    .container{
        width: 100%;
        display: flex;
        justify-content:center;
        align-items:center;
        flex-wrap: wrap;
    }

    .item-container {
        position: relative;
        margin: 24px;
        width: 360px;
        height: 480px;
        overflow: hidden;
        background-color: #fff;
        box-shadow: 0 0 30px 5px rgba(0, 0, 0, 0.15);
        cursor: pointer;
        border: 0.5px solid lightgrey;
    }

    .img-container,
    .body-container{
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

    .img-container img{
        width: 100%;
    }
    
    .body-container {
        position:relative;
    }

    .overlay {
        position: relative;
        width: 100%;
        height: 300px;
        background-color: rgba(24, 83, 122, 0.6);
        opacity: 0;
        transition: height linear 0.4s, opacity linear 0.2s;
    }

    .item-container:hover .overlay{
        opacity: 1;
        height:150px;
    }

    .event-info{
        background-color: #fff;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 8px;
    }

    .title {
        color: #18537a;
        font-size: 1.4em;
        font-weight: bold;
        letter-spacing: 1px;
        margin: 12px;
    }

    .price{
        color: #18537a;
        font-size: 1.4em;
        font-weight: bold;
        letter-spacing: 1px;
        margin-bottom: 17px;
        margin-left: 6px;
        margin-right: 6px;
        margin-top: 6px;
    }

    .info{
        letter-spacing: 0.5px;
        margin-bottom: 6px;
    }

    .seperator{
        width: 20%;
        height: 6px;
        background: #17537a;
        margin-bottom: 8px;
    }

    .additional-info {
        border-top: 1px solid #bbb;
        margin-top: 3px;
        padding:28px;
        padding-bottom: 0;
    }

    .additional-info .info {
        font-size: 0.9em;
        margin-top: 10px;
        text-align: center;
    }
 
    .info i {
        color: #18537a;
        font-size: 1.1em;
        margin-right: 4px;
    }

    .alert-info description{
        background-color: #fff !important;
    }

    .alert-info .description span {
        color: #18537a;
        font-weight: bolder;
        background: #fff;
    }

    .action {
        color: #fff;
        border: 3px solid #fff;
        background-color: transparent;
        position: absolute;
        top: -100px;
        left: 50%;
        transform: translateX(-50%);
        width: 60%;
        outline: none;
        cursor: pointer;
        padding: 12px;
        text-transform: uppercase;
        font-size: 1.3em;
        font-weight: bold;
        letter-spacing: 2px;
        transition: background-color 0.4s, top 0.4s;
    }

    .item-container:hover .action {
        top: 50px;
    }

    action:hover{
        background-color: rgba(255, 255, 255, 0.2);
    }
</style>

@code
{
    private List<EventModel>? Events;
    public EventModel? _Event { get; set; }
    //searchbox
    private List<EventModel>? fEvents;
    private string? userCountry { get; set; }
    private decimal userRate { get; set; }
    private string sort = string.Empty;
    [Parameter]
    public string? searchWord { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity!.IsAuthenticated)
        {
            Events = await service.GetEventsAsync();
            userCountry = await service.GetUserCountryByUsernameAsync(user.Identity.Name!);

            if (userCountry != null)
            {
                userRate = await CurrencyManager.GetRate(userCountry);
            }
        }

        //search
        fEvents = await service.GetEventsAsync();

        fEvents = Events;
    }

    protected override void OnParametersSet()
    {
        if(searchWord != null)
        {
            string? filterWord = searchWord;
            SearchEventsByHomePage(filterWord!);
            StateHasChanged();
        }
    }

    private void SearchEventsByHomePage(string filterWord)
    {
        fEvents = Events.Where(ev =>
            ev.Name!.ToLower().Contains(filterWord.ToLower())
            || ev.Type!.ToString().ToLower().Contains(filterWord.ToLower())
            || ev.Venue!.ToLower().Contains(filterWord.ToLower())
        ).ToList();
    }

    private void SearchEventsDynamic(ChangeEventArgs e)
    {
        fEvents = Events.Where(ev =>
            ev.Name!.ToLower().Contains(e.Value.ToString().ToLower())
            || ev.Type!.ToString().ToLower().Contains(e.Value.ToString().ToLower())
            || ev.Venue!.ToLower().Contains(e.Value.ToString().ToLower())
        ).ToList();
    }

    private void SortEvents(ChangeEventArgs e)
    {
        sort = e.Value.ToString();

        if (sort == "Low to high price")
        {
            fEvents = Events?.OrderBy(e => e.Price).ToList();
        }
        else if (sort == "High to low price")
        {
            fEvents = Events?.OrderByDescending(e => e.Price).ToList();
        }
        else if (sort == "Closest date")
        {
            fEvents = Events?.OrderBy(e => e.Date).ToList();
        }
        else if (sort == "Furthest date")
        {
            fEvents = Events?.OrderByDescending(e => e.Date).ToList();
        }
        else if (sort == "All Events")
        {
            fEvents = Events?.ToList();
        }
    }
}