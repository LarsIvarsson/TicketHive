@page "/home"
@inject IAppService service
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider authStateProvider;
@inject NavigationManager navManager;
@attribute [Authorize]

<AuthorizeView Roles="Admin">
	<button type="button" class="btn btn-danger btn-rounded" @onclick='() => navManager.NavigateTo("/admin")'>Go to Admin view</button>
</AuthorizeView>

<div class="text-center">
	<h3 class="card-title">Home Page</h3>
	
	
	<div class="search">
		<input class="search-Input" 
			placeholder="Search event..." 
			style="text-align:center;" 
			type="text" @bind-value="searchWord" />
		<button class="searchButton text-center" @onclick="HandleSearchWord">Search</button>
	<div>
		@if (searchWord == null && errorMessage != null)
		{
			<em class="text-danger">@errorMessage</em>
		}
	</div>
	<hr />
    </div>
	<div class="row">
		<div class="col-6">
			<h3>Your booked events</h3>


			@if (groupedList is null || groupedList.Count == 0)
			{
				<p>No events booked yet...</p>
				<p>Go to <a href="allEvents" style="text-decoration: none;">All events</a> 
					to get tickets for your next event</p>
			}
			else
			{
				@foreach (var group in groupedList)
				{
					<img src=@group.First().ImageUrl style="max-width:250px;"/>
					<p>@group.Count() ticket(s) for event: @group.First().Name</p>
					<hr />			
				}
			}
		</div>
		<div class="col-6">
			<h3>Popular events</h3>
			@if (PopularEvents is null)
			{
				<div class="spinner-border"></div>
			}
			else
			{
				@foreach (var e in PopularEvents)
				{

					<div>
						<a href="eventDetails/@e.Id" Event="@e">
							<img src="@e.ImageUrl" style="max-width:250px;" />
						</a>
						<p>@e.Name</p>
						<hr />
					</div>										
				}
			}
		</div>
	</div>
</div>

<style>
	.card-title {
		font-size: 3.5rem;
		color: #305076;
		margin-bottom: 0.5rem;
		text-transform: uppercase;
		text-align: center;
	}

	.search-Input {
		background-color: transparent;
		border-radius: 10px;
		height: 30px;
		margin: 20px 5px 20px 20px;
		width: 200px;
		/*box-shadow: 0 0 5px 5px rgba(0, 0, 0, 0.05);*/
		border: 1px solid #18537a;
		position: relative;
		color: #305076;
		padding-left: 10px;
	}

	.searchButton{
		background-color: #D0E1ED;
		border-radius: 10px;
		height: 30px;
		margin: 20px 20px 20px 5px;
		width: 80px;
		/*box-shadow: 0 0 5px 5px rgba(0, 0, 0, 0.05);*/
		border: 1px solid #18537a;
		position: relative;
		color: #305076;
		padding-left: 10px;
	}
</style>



@code {

	private List<EventModel>? PopularEvents;
	private List<IGrouping<int, EventModel>>? groupedList;
	private UserModel? _User { get; set; }
	private AuthenticationState? authState;
	private string? searchWord { get; set; }
	private string? errorMessage { get; set; }

	protected override async Task OnInitializedAsync()
	{
		authState = await authStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity!.IsAuthenticated)
		{
			_User = await service.GetUserByUsernameAsync(user.Identity.Name!);
			await GetUserEvents();
			PopularEvents = await service.GetEventsAsync();
		}
	}

	private async Task GetUserEvents()
	{
		// this is to get and sort events from cookie
		var cookie = await localStorage.GetItemAsync<UserModel>(authState?.User.Identity?.Name);
		if (cookie is null)
		{
			groupedList = null;
		}
		else /*if (cookie.UserEvents != null)*/
		{
			groupedList = cookie.UserEvents.GroupBy(e => e.Id).Select(grp => grp).ToList();
		}
	}

	//protected override void OnParametersSet()
	//{
	//	GetUserEvents();
	//}

	//private void GetUserEvents()
	//{
	//	UserEvents = _User!.UserEvents;
	//}

	private void HandleSearchWord()
	{
		errorMessage = null!;

		if(searchWord != null)
		{
			navManager.NavigateTo($"/allevents/{searchWord}");
		}

		else
		{
			errorMessage = "Please enter a search word before pressing the button...";
		}
	}
}
