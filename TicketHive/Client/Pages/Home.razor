@page "/home"
@inject IAppService service
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider authStateProvider;
@attribute [Authorize]

<div class="text-center">
	<h2>Home</h2> <hr />
	
	<div class="search">
	<input class="search-Input" placeholder="Search event.." style="text-align: center content-align: center" type="text" @oninput="SerarchEvents" />
	<button class="searchButton">Sök</button>
	<hr />
    </div>
	<div class="row">
		<div class="col-6">
			<h3>Your booked events</h3>


			@if (groupedList is null || groupedList.Count == 0)
			{
				<p>No events booked yet...</p>
				<p>Go to <a href="allEvents" style="text-decoration: none;">All events</a> 
					to get tickets for your next event</p>
			}
			else
			{
				@foreach (var group in groupedList)
				{
					<p>@group.Count() ticket(s) for event: @group.ElementAt(0).Name</p>
					<hr />			
				}
			}
		</div>
		<div class="col-6">
			<h3>Popular events</h3>
			@if (PopularEvents is null)
			{
				<p>Loading popular events...</p>
			}
			else
			{
				@foreach (var e in PopularEvents)
				{
					// from popular events do not show already booked events
					<div>
						<a href="eventDetails/@e.Id" Event="@e">
							<img src="@e.ImageUrl" style="max-width:250px;" />
						</a>
						<p>@e.Name</p>
						<hr />
					</div>										
				}
			}
		</div>
	</div>
</div>

<style>

	.search-Input {
		background-color: transparent;
		border-radius: 10px;
		color: #fbe89c;
		height: 35px;
		margin: 5px;
		width: 225px;
		box-shadow: 0 0 10px 5px rgba(0, 0, 0, 0.15);
		border: 1px solid #000;
		position: relative;
		color: lightgray;
		padding-left: 10px;
	}

	.searchButton{
		background-color: transparent;
		border-radius: 10px;
		color: #fbe89c;
		height: 35px;
		margin: 5px;
		width: 50px;
		box-shadow: 0 0 10px 5px rgba(0, 0, 0, 0.15);
		border: 1px solid #000;
		position: relative;
		color: #fff;
		padding-left: 10px;
	}
</style>



@code {

	//private List<EventModel>? UserEvents;
	private List<EventModel>? PopularEvents;
	private List<IGrouping<int, EventModel>>? groupedList;
	private UserModel? _User { get; set; }
	private AuthenticationState? authState;

	protected override async Task OnInitializedAsync()
	{
		authState = await authStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity!.IsAuthenticated)
		{
			_User = await service.GetUserByUsernameAsync(user.Identity.Name!);
			await GetUserEvents();
			PopularEvents = await service.GetEventsAsync();
		}
	}

	private async Task GetUserEvents()
	{
		// this is to get and sort events from cookie
		var cookie = await localStorage.GetItemAsync<UserModel>(authState?.User.Identity?.Name);
		if (cookie is null)
		{
			groupedList = null;
		}
		else /*if (cookie.UserEvents != null)*/
		{
			groupedList = cookie.UserEvents.GroupBy(e => e.Id).Select(grp => grp).ToList();
		}
	}

	//protected override void OnParametersSet()
	//{
	//	GetUserEvents();
	//}

	//private void GetUserEvents()
	//{
	//	UserEvents = _User!.UserEvents;
	//}

	private void SerarchEvents(ChangeEventArgs e)
	{
		
	}
}
